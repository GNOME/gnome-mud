
                            GNOME-Mud Python API
     _________________________________________________________________

                            GNOME-Mud Python API

                              Petter E. Stokke

                        E-mail: gibreel@project23.no

                               Release 0.8.99
                             November 16, 2001

  Abstract:

   Documentation for the Python scripting API of the GNOME-Mud
   application.

Contents

     * 1 Introduction
     * 2 Basics
     * 3 GnomeMud module
          + 3.1 Connection class
     * 4 Example GNOME-Mud script
     * About this document ...

                                1 Introduction

   GNOME-Mud provides an embedded Python interpreter allowing advanced
   scripting. This document briefly describes the Python API provided. It
   is assumed that the reader is familiar with basic Python programming;
   tutorials and additional documentation are available on the Python Web
   page.

                                   2 Basics

   When GNOME-Mud launches, it scans the $HOME/.gnome-mud directory for
   Python scripts, ie. files ending with the suffix .py, and loads each
   script found in turn. Each script should import the GnomeMud module,
   which provides all the API functions necessary for writing useful
   scripts.

                               3 GnomeMud module

   The GnomeMud module provides access to the GNOME-Mud scripting API.
   Normally, a script would call register_input_handler() and
   register_output_handler() as needed to register callback functions,
   possibly adding some widgets using add_user_widget() if using PyGTK,
   and then have no further use of this module.

   add_user_widget(widget, expand=TRUE, fill=TRUE, padding=5)
          Adds a GTK+ widget, created by PyGTK, to the GNOME-Mud
          application window. The parameters are passed more or less
          directly to gtk_box_pack_start(), and the meaning of expand,
          fill and padding is to be found in the GTK+ documentation.

          You would commonly use this function to build status displays
          or action buttons.

          Note: The widget parameter must refer to a genuine PyGTK
          widget. The function will only check to ensure it is passed a
          Python object, and then blithely go on to assume it is the
          correct type of Python object. The effect of passing a
          different kind of object to the function is undefined, although
          GTK+ can generally be trusted to spot the error. However,
          Python will be completely unaware of the incident and assume
          everything proceeded in a correct manner.

          This function is only available if GNOME-Mud has been compiled
          with PyGTK support.

   connection()
          Returns a Connection object for the currently active
          connection, meaning the connection tab being currently
          displayed in the GNOME-Mud application window. This is useful
          for printing some descriptive text during script
          initialisation, or displaying some especially urgent text to
          the user from a callback function.

   register_input_handler(function)
          Registers a callback function for input received from a MUD
          connection. The callback function is passed two parameters: a
          Connection object referring to the connection on which the
          input was received, and a string containing the actual input.
          The return value of the function may be a string, which is then
          further processed by GNOME-Mud as if it were the actual data
          received from the connection, or any other type of Python
          object, in which case GNOME-Mud is passed the original string.
          Thus, you are able to modify the data received on a socket
          before GNOME-Mud at large sees it, allowing you to gag input or
          perform text substitutions.

   register_output_handler(function)
          Registers a callback function for data being sent to a MUD
          connection. This works similarly to the callback functions for
          register_input_handler() above, but applies to text entered by
          the user, or caused by triggers or key bindings. It does not
          apply to data sent by Python scripts using the send() method
          provided by the Connection class.

   version()
          This function simply returns the GNOME-Mud version that is
          running, as a string.

3.1 Connection class

   Connection is an interface class for a GNOME-Mud connection, meaning a
   socket connection to a MUD and its corresponding text display. It is
   normally used for sending data to the socket through the send method
   and printing to the display using the write() method.

   class Connection()
          The Connection class has no constructor; instances of this
          class are created by GNOME-Mud and passed to the callback
          functions as needed, or accessed through the GnomeMud module's
          connection() function.

        exception ConnectionError
                This exception is raised by send if a script is trying to
                write to a Connection class that is not actually
                connected to a socket.

        send(data, echo=1)
                Sends the string data to the connection, echoing it to
                the display if echo is true and the user has requested
                echoing in the GNOME-Mud configuration.

                ConnectionError will be raised if this method is called
                on a Connection object that is not actually connected to
                a socket (as determined by the connected member).

        write(data)
                Writes the string data to the display. It may contain
                ANSI formatting codes.

        connected
                An integer which is true if the Connection instance is
                connected to a socket, and false otherwise. An attempt to
                send() data to an unconnected Connection will result in
                the ConnectionError exception being raised.

        host
                A string containing the host address of the remote end of
                the connection.

        port
                A string containing the TCP port of the remote end of the
                connection.

        profile
                A string containing the name of the GNOME-Mud profile
                that is active for this connection.

                          4 Example GNOME-Mud script

   Below is a simple example script that will replace occurrences of the
   text ``foo'' with ``bar'' in both MUD input and user commands, as well
   as printing the obligatory text to the display upon initialisation to
   identify its presence.

import GnomeMud

def replace_foo(conn, data):
    return data.replace("foo","bar")

conn = GnomeMud.connection()
conn.write("Hello, world!\n")
GnomeMud.register_input_handler(replace_foo)
GnomeMud.register_output_handler(replace_foo)

                            About this document ...

   GNOME-Mud Python API, November 16, 2001, Release 0.8.99
     _________________________________________________________________

                            GNOME-Mud Python API
     _________________________________________________________________

   Release 0.8.99, documentation updated on November 16, 2001.
